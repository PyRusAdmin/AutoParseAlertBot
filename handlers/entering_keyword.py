# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from database.database import User, create_keywords_model
from keyboards.keyboards import back_keyboard
from locales.locales import get_text
from states.states import MyStates
from system.dispatcher import router


@router.message(F.text == "–í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
async def handle_enter_keyword_menu(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    telegram_user = message.from_user
    user = User.get(User.user_id == telegram_user.id)

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.id} {telegram_user.username} {telegram_user.first_name} {telegram_user.last_name} –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é –í–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞")

    await message.answer(
        get_text(user.language, "enter_keyword"),
        reply_markup=back_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
    )
    await state.set_state(MyStates.entering_keyword)


@router.message(MyStates.entering_keyword)
async def handle_keywords_submission(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è"""

    raw_input = message.text.strip()
    telegram_user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {raw_input}")

    keywords_list = [
        keyword.strip()
        for keyword in raw_input.split('\n')
        if keyword.strip()
    ]

    if not keywords_list:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    KeywordsModel = create_keywords_model(user_id=telegram_user.id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø / –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º)
    if not KeywordsModel.table_exists():
        KeywordsModel.create_table()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user.id}")

    added_keywords = []
    skipped_keywords = []
    error_keywords = []

    # Add each keyword one by one
    for keyword in keywords_list:
        try:
            KeywordsModel.create(user_keyword=keyword)
            added_keywords.append(keyword)
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                skipped_keywords.append(keyword)
            else:
                error_keywords.append((keyword, str(e)))
                logger.error(f"Error adding keyword {keyword}: {e}")

    # Format response message
    response_parts = []

    if added_keywords:
        keywords_preview = added_keywords[:10]  # Show first 10
        keywords_text = "\n".join(f"‚Ä¢ {kw}" for kw in keywords_preview)
        if len(added_keywords) > 10:
            keywords_text += f"\n... –∏ –µ—â—ë {len(added_keywords) - 10}"
        response_parts.append(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(added_keywords)}\n{keywords_text}"
        )

    if skipped_keywords:
        skipped_preview = skipped_keywords[:5]  # Show first 5
        skipped_text = "\n".join(f"‚Ä¢ {kw}" for kw in skipped_preview)
        if len(skipped_keywords) > 5:
            skipped_text += f"\n... –∏ –µ—â—ë {len(skipped_keywords) - 5}"
        response_parts.append(
            f"‚ö†Ô∏è –£–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã ({len(skipped_keywords)}):\n{skipped_text}"
        )

    if error_keywords:
        error_text = "\n".join(f"‚Ä¢ {kw}: {err}" for kw, err in error_keywords[:3])
        if len(error_keywords) > 3:
            error_text += f"\n... –∏ –µ—â—ë {len(error_keywords) - 3} –æ—à–∏–±–æ–∫"
        response_parts.append(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n{error_text}")

    # Summary
    summary = (
        f"\nüìä –ò—Ç–æ–≥–æ:\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(added_keywords)}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {len(skipped_keywords)}\n"
        f"‚Ä¢ –û—à–∏–±–∫–∏: {len(error_keywords)}"
    )
    response_parts.append(summary)

    await message.answer("\n\n".join(response_parts))

    # Log statistics
    logger.info(
        f"Keywords import for user {telegram_user.id}: "
        f"added={len(added_keywords)}, skipped={len(skipped_keywords)}, errors={len(error_keywords)}"
    )

    await state.clear()


def register_entering_keyword_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.message.register(handle_enter_keyword_menu)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
