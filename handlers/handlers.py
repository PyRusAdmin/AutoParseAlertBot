# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from database.database import User, create_groups_model
from keyboards.keyboards import (get_lang_keyboard, main_menu_keyboard, settings_keyboard, back_keyboard,
                                 menu_launch_tracking_keyboard)
from locales.locales import get_text
from parsing.parser import filter_messages
from states.states import MyStates
from system.dispatcher import router


@router.message(CommandStart())
async def handle_start_command(message: Message) -> None:
    user_tg = message.from_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å language = "unset", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "unset"  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: "unset" = —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏ —Ç.–ø.)
        user.username = user_tg.username
        user.first_name = user_tg.first_name
        user.last_name = user_tg.last_name
        user.save()

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if user.language == "unset":
        # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Telegram, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—Ç—å –≤—ã–±–æ—Ä
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language:",
            reply_markup=get_lang_keyboard()
        )
    else:
        # –Ø–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        text = get_text(user.language, "welcome_message")
        await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]))
async def handle_language_selection(message: Message):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user.language = "ru"
        confirmation_text = get_text("ru", "lang_selected")
    elif message.text == "üá¨üáß English":
        user.language = "en"
        confirmation_text = get_text("en", "lang_selected")

    user.save()

    await message.answer(confirmation_text, reply_markup=main_menu_keyboard())


@router.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings_menu(message: Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    await message.answer(
        get_text(user.language, "settings_message"),
        reply_markup=settings_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_tg = message.from_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å language = "unset", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "unset"  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: "unset" = —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏ —Ç.–ø.)
        user.username = user_tg.username
        user.first_name = user_tg.first_name
        user.last_name = user_tg.last_name
        user.save()

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if user.language == "unset":
        # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Telegram, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—Ç—å –≤—ã–±–æ—Ä
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language:",
            reply_markup=get_lang_keyboard()
        )
    else:
        # –Ø–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        text = get_text(user.language, "welcome_message")
        await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text == "‚èØ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_start_tracking(message: Message):
    """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")

    await message.answer(
        get_text(user.language, "launching_tracking"),
        reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    )

    await  filter_messages(
        message=message,
        user_id=user_tg.id,
        user=user
    )


@router.message(F.text == "üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def handle_refresh_groups_list(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")

    await message.answer(
        get_text(user.language, "update_list"),
        reply_markup=back_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
    )
    await state.set_state(MyStates.waiting_username_group)


@router.message(MyStates.waiting_username_group)
async def handle_group_usernames_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username"""

    # username_group = message.text
    # user_tg = message.from_user
    raw_text = message.text.strip()
    user_tg = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è –≥—Ä—É–ø–ø—ã: {raw_text}")

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    usernames = [u.strip() for u in raw_text.replace("\n", " ").split() if u.strip()]

    if not usernames:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Groups = create_groups_model(user_id=user_tg.id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º)
    if not Groups.table_exists():
        Groups.create_table()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg.id}")

    added = []
    skipped = []
    errors = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for username in usernames:
        try:
            Groups.create(username_chat_channel=username, user_keyword=None)
            added.append(username)
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                skipped.append(username)
            else:
                errors.append((username, str(e)))
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {username}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = []
    if added:
        response.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã:\n" + "\n".join(added))
    if skipped:
        response.append("‚ö†Ô∏è –£–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + "\n".join(skipped))
    if errors:
        response.append("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n" + "\n".join(f"{u}: {e}" for u, e in errors))

    await message.answer("\n\n".join(response))
    await state.clear()


def register_greeting_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.message.register(handle_start_command)
    router.message.register(handle_language_selection)
    router.message.register(handle_settings_menu)
    router.message.register(handle_back_to_main_menu)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    router.message.register(handle_start_tracking)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    router.message.register(handle_refresh_groups_list)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
