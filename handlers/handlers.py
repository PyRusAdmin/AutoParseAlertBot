# handlers/handlers.py
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from loguru import logger
from models import User
from locales.locales import get_text
from system.dispatcher import bot, dp


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_tg = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "ru"  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        user.username = user_tg.username
        user.first_name = user_tg.first_name
        user.last_name = user_tg.last_name
        user.save()

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if user.language == "ru" and not user_tg.language_code:
        # –ù–æ —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å: –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ language == "temp", —Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω.
        # –õ—É—á—à–µ —è–≤–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –û–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –µ—Å–ª–∏ language == "unset" ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å.
        # –ò–∑–º–µ–Ω–∏–º –ª–æ–≥–∏–∫—É: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∏–º language = "unset"
        pass

    # üëá –õ—É—á—à–µ: –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    # –ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram language_code –∫–∞–∫ fallback ‚Äî –º–æ–∂–Ω–æ.
    # –°–µ–π—á–∞—Å —Å–¥–µ–ª–∞–µ–º: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å.

    if user.language in ("ru", "en"):
        # –£–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        text = get_text(user.language, "welcome_message")
        await message.answer(text)
    else:
        # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        text = get_text("ru", "welcome_ask_language")  # –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ language_code
        await message.answer(text, reply_markup=get_lang_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message(F.text.in_({"üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"}))
async def handle_language_selection(message: Message):
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user.language = "ru"
        confirm_text = get_text("ru", "lang_selected")
    elif message.text == "üá¨üáß English":
        user.language = "en"
        confirm_text = get_text("en", "lang_selected")
    else:
        return  # –∏–≥–Ω–æ—Ä

    user.save()
    await message.answer(confirm_text, reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome = get_text(user.language, "welcome_message")
    await message.answer(welcome)
