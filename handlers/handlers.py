# -*- coding: utf-8 -*-
import os

from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from database.database import User, create_groups_model
from keyboards.keyboards import (get_lang_keyboard, main_menu_keyboard, settings_keyboard, back_keyboard,
                                 menu_launch_tracking_keyboard)
from locales.locales import get_text
from parsing.parser import filter_messages
from states.states import MyStates
from system.dispatcher import router


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_tg = message.from_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å language = "unset", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "unset"  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: "unset" = —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏ —Ç.–ø.)
        user.username = user_tg.username
        user.first_name = user_tg.first_name
        user.last_name = user_tg.last_name
        user.save()

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if user.language == "unset":
        # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Telegram, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—Ç—å –≤—ã–±–æ—Ä
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language:",
            reply_markup=get_lang_keyboard()
        )
    else:
        # –Ø–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        text = get_text(user.language, "welcome_message")
        await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]))
async def handle_language_selection(message: Message):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user.language = "ru"
        confirm = get_text("ru", "lang_selected")
    elif message.text == "üá¨üáß English":
        user.language = "en"
        confirm = get_text("en", "lang_selected")

    user.save()

    await message.answer(confirm, reply_markup=main_menu_keyboard())


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    await message.answer(
        get_text(user.language, "settings_message"),
        reply_markup=settings_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_tg = message.from_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å language = "unset", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "unset"  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: "unset" = —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏ —Ç.–ø.)
        user.username = user_tg.username
        user.first_name = user_tg.first_name
        user.last_name = user_tg.last_name
        user.save()

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if user.language == "unset":
        # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Telegram, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—Ç—å –≤—ã–±–æ—Ä
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language:",
            reply_markup=get_lang_keyboard()
        )
    else:
        # –Ø–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        text = get_text(user.language, "welcome_message")
        await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(F.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def handle_connect_account(message: Message):
    """–ú–µ–Ω—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_tg = message.from_user

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å language = "unset", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user, created = User.get_or_create(
        user_id=user_tg.id,
        defaults={
            "username": user_tg.username,
            "first_name": user_tg.first_name,
            "last_name": user_tg.last_name,
            "language": "unset"  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ: "unset" = —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
        }
    )

    text = get_text(user.language, "connect_account")
    await message.answer(text, reply_markup=back_keyboard())


@router.message(F.document)
async def handle_account_file(message: Message):
    """–ü—Ä–∏—ë–º —Ñ–∞–π–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É account"""
    user_tg = message.from_user
    document = message.document

    user_id = message.from_user.id
    logger.info(f"User {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–∫–∫–∞—É–Ω—Ç {document.file_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.endswith(".session"):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ (.session).")
        return

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    folder_path = os.path.join(os.getcwd(), f"accounts/{user_id}")
    os.makedirs(folder_path, exist_ok=True)

    # –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_path = os.path.join(folder_path, document.file_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, file_path)

    await message.answer(f"‚úÖ –§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É account.")


@router.message(F.text == "–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def handle_launching_tracking(message: Message):
    """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")

    await message.answer(
        get_text(user.language, "launching_tracking"),
        reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    )

    await  filter_messages(
        message=message,
        user_id=user_tg.id,
        user=user
    )


@router.message(F.text == "üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def handle_update_list(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"""
    user_tg = message.from_user
    user = User.get(User.user_id == user_tg.id)

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} {user_tg.username} {user_tg.first_name} {user_tg.last_name} –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")

    await message.answer(
        get_text(user.language, "update_list"),
        reply_markup=back_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
    )
    await state.set_state(MyStates.waiting_username_group)


@router.message(MyStates.waiting_username_group)
async def handle_username_group(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username"""

    # username_group = message.text
    # user_tg = message.from_user
    username_group = message.text.strip()
    user_tg = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è –≥—Ä—É–ø–ø—ã: {username_group}")

    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Groups = create_groups_model(user_id=user_tg.id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º)
    if not Groups.table_exists():
        Groups.create_table()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg.id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        group = Groups.create(username_chat_channel=username_group)
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {username_group} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")
        logger.info(f"–ì—Ä—É–ø–ø–∞ {username_group} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_tg.id}")
    except Exception as e:
        if "UNIQUE constraint failed" in str(e):
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")


def register_greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.message.register(command_start_handler)
    router.message.register(handle_language_selection)
    router.message.register(handle_settings)
    router.message.register(handle_main_menu)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    router.message.register(handle_connect_account)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    router.message.register(handle_account_file)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .session
    router.message.register(handle_launching_tracking)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

    router.message.register(handle_update_list)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
