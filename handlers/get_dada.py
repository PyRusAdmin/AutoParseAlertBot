# -*- coding: utf-8 -*-
import os
from datetime import datetime

from aiogram import F
from aiogram.types import Message, FSInputFile
from loguru import logger
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill

from database.database import User, create_keywords_model, create_groups_model
from locales.locales import get_text
from system.dispatcher import router


def create_excel_file(data: list, headers: list, filename: str, sheet_name: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    :param data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
    :param headers: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    :param filename: –ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    :param sheet_name: –ò–º—è –ª–∏—Å—Ç–∞ Excel
    :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª (—Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É)
    workbook = Workbook()
    sheet = workbook.active
    sheet.title = sheet_name  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    header_font = Font(bold=True, color="FFFFFF", size=12)  # –ñ–∏—Ä–Ω—ã–π –±–µ–ª—ã–π —à—Ä–∏—Ñ—Ç
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")  # –°–∏–Ω–∏–π —Ñ–æ–Ω
    header_alignment = Alignment(horizontal="center", vertical="center")  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

    # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    for col_num, header in enumerate(headers, start=1):
        cell = sheet.cell(row=1, column=col_num)
        cell.value = header
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = header_alignment

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
    for row_num, row_data in enumerate(data, start=2):
        for col_num, cell_value in enumerate(row_data, start=1):
            cell = sheet.cell(row=row_num, column=col_num)
            cell.value = cell_value
            cell.alignment = Alignment(horizontal="left", vertical="center")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    for column in sheet.columns:
        max_length = 0
        column_letter = column[0].column_letter
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 50 —Å–∏–º–≤–æ–ª–∞–º–∏
        sheet.column_dimensions[column_letter].width = adjusted_width

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É exports, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    exports_dir = "exports"
    os.makedirs(exports_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filepath = os.path.join(exports_dir, filename)
    workbook.save(filepath)
    logger.info(f"Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filepath}")

    return filepath


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
async def get_keywords_list(message: Message):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel-—Ñ–∞–π–ª.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ Telegram.
    """
    telegram_user = message.from_user
    user = User.get(User.user_id == telegram_user.id)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.id} {telegram_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    KeywordsModel = create_keywords_model(user_id=telegram_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    if not KeywordsModel.table_exists():
        KeywordsModel.create_table()
        await message.answer(get_text(user.language, "no_keywords"))
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = list(KeywordsModel.select())

    if not keywords:
        await message.answer(get_text(user.language, "no_keywords"))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Excel
    data = []
    for idx, keyword in enumerate(keywords, start=1):
        data.append((idx, keyword.user_keyword))  # –ù–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"keywords_{telegram_user.id}_{timestamp}.xlsx"
    headers = ["‚Ññ", "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ / Keyword"]

    try:
        # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª
        filepath = create_excel_file(
            data=data,
            headers=headers,
            filename=filename,
            sheet_name="Keywords"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        document = FSInputFile(filepath)
        await message.answer_document(
            document=document,
            caption=f"üìã {get_text(user.language, 'keywords_export')}\n"
                    f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}"
        )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(filepath)
        logger.info(f"–§–∞–π–ª –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω: {filepath}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {e}")
        await message.answer(get_text(user.language, "export_error"))


@router.message(F.text == "–°—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def get_tracking_links_list(message: Message):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ (–∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ Excel-—Ñ–∞–π–ª.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
    """
    telegram_user = message.from_user
    user = User.get(User.user_id == telegram_user.id)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.id} {telegram_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    GroupsModel = create_groups_model(user_id=telegram_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    if not GroupsModel.table_exists():
        GroupsModel.create_table()
        await message.answer(get_text(user.language, "no_tracking_links"))
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã)
    groups = list(GroupsModel.select())

    if not groups:
        await message.answer(get_text(user.language, "no_tracking_links"))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
    data = []
    for idx, group in enumerate(groups, start=1):
        data.append((idx, group.username_chat_channel))  # –ù–æ–º–µ—Ä –∏ username –∫–∞–Ω–∞–ª–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"tracking_links_{telegram_user.id}_{timestamp}.xlsx"
    headers = ["‚Ññ", "Username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã / Channel/Group Username"]

    try:
        # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª
        filepath = create_excel_file(
            data=data,
            headers=headers,
            filename=filename,
            sheet_name="Tracking Links"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document = FSInputFile(filepath)
        await message.answer_document(
            document=document,
            caption=f"üîó {get_text(user.language, 'tracking_links_export')}\n"
                    f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}"
        )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(filepath)
        logger.info(f"–§–∞–π–ª —Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω: {filepath}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏: {e}")
        await message.answer(get_text(user.language, "export_error"))


def register_data_export_handlers():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
    (–ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.)
    """
    router.message.register(get_keywords_list)
    router.message.register(get_tracking_links_list)
