# -*- coding: utf-8 -*-
import asyncio
import os

from loguru import logger
from telethon import TelegramClient, events
from telethon.errors import UserAlreadyParticipantError, FloodWaitError, InviteRequestSentError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Message

from database.database import create_groups_model, create_keywords_model, create_group_model
from keyboards.keyboards import menu_launch_tracking_keyboard
from locales.locales import get_text
from system.dispatcher import api_id, api_hash

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "target_channel_id": -1001918436153,
}

# üß† –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
forwarded_messages = set()


async def get_target_group_id(client: TelegramClient, user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param client: –û–±—ä–µ–∫—Ç TelegramClient
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
    """
    GroupModel = create_group_model(user_id=user_id)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not GroupModel.table_exists():
        GroupModel.create_table()
        logger.info(f"Created target group table for user {user_id}")
        return None

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã (–º–æ–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø)
    groups = list(GroupModel.select())
    if not groups:
        logger.warning(f"No target group found for user {user_id}")
        return None

    target_username = groups[0].user_group
    logger.info(f"Target group username: {target_username}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
        entity = await client.get_entity(target_username)
        target_group_id = entity.id
        logger.success(f"‚úÖ Target group ID resolved: {target_group_id}")
        return target_group_id
    except Exception as e:
        logger.error(f"‚ùå Failed to resolve target group {target_username}: {e}")
        return None


async def join_target_group(client: TelegramClient, user_id):
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param client: –û–±—ä–µ–∫—Ç TelegramClient
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ None
    """
    GroupModel = create_group_model(user_id=user_id)

    if not GroupModel.table_exists():
        GroupModel.create_table()
        return None

    groups = list(GroupModel.select())
    if not groups:
        return None

    target_username = groups[0].user_group

    try:
        logger.info(f"üîó Attempting to join target group {target_username}...")
        await client(JoinChannelRequest(target_username))
        logger.success(f"‚úÖ Successfully joined target group {target_username}")

        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
        entity = await client.get_entity(target_username)
        return entity.id

    except UserAlreadyParticipantError:
        logger.info(f"‚ÑπÔ∏è Already member of target group {target_username}")
        entity = await client.get_entity(target_username)
        return entity.id

    except FloodWaitError as e:
        logger.warning(f"‚ö†Ô∏è FloodWait error. Waiting {e.seconds} seconds...")
        await asyncio.sleep(e.seconds)
        try:
            await client(JoinChannelRequest(target_username))
            entity = await client.get_entity(target_username)
            return entity.id
        except Exception as retry_error:
            logger.error(f"‚ùå Failed to join target group after retry: {retry_error}")
            return None

    except ValueError:
        logger.error(f"‚ùå Invalid target group username: {target_username}")
        return None

    except InviteRequestSentError:
        logger.error(f"‚ùå Invite request sent for {target_username}, waiting for approval")
        return None

    except Exception as e:
        logger.exception(f"‚ùå Failed to join target group {target_username}: {e}")
        return None


async def process_message(client, message: Message, chat_id: int, user_id, target_group_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    """
    if not message.message:
        return

    message_text = message.message.lower()
    msg_key = f"{chat_id}-{message.id}"

    if msg_key in forwarded_messages:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Keywords = create_keywords_model(user_id=user_id)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not Keywords.table_exists():
        Keywords.create_table()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return  # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞, –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –µ—â–µ –Ω–µ—Ç

    keywords = [keyword.user_keyword for keyword in Keywords.select() if keyword.user_keyword]

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –≤—ã—Ö–æ–¥–∏–º
    if not keywords:
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    keywords_lower = [keyword.lower() for keyword in keywords]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if any(keyword in message_text for keyword in keywords_lower):
        logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –ü–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID={message.id}")
        try:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CONFIG["target_channel_id"] –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            # await client.forward_messages(CONFIG["target_channel_id"], message)
            await client.forward_messages(target_group_id, message)
            forwarded_messages.add(msg_key)
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


async def join_required_channels(client: TelegramClient, user_id):
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
    :param client: –û–±—ä–µ–∫—Ç TelegramClient
    :param user_id: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Groups = create_groups_model(user_id=user_id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø
    Groups.create_table()

    channels = [group.username_chat_channel for group in Groups.select()]

    for channel in channels:
        try:
            logger.info(f"üîó –ü—Ä–æ–±—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}...")
            await client(JoinChannelRequest(channel))
            logger.success(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            logger.warning("‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É")
            await asyncio.sleep(5)
        except UserAlreadyParticipantError:
            logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
        except FloodWaitError as e:
            if e.seconds:
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É. –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.seconds)
                try:
                    await client(JoinChannelRequest(channel))
                    logger.success(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                except InviteRequestSentError:
                    logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel} (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)")
        except ValueError:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel} (–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞)")
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
            deleted = Groups.delete().where(Groups.username_chat_channel == channel).execute()
            if deleted:
                logger.info(f"üóëÔ∏è –ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except InviteRequestSentError:
            logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel} (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)")
        except Exception as e:
            logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}: {e}")


async def filter_messages(message, user_id, user):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AIOgram
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ accounts/<user_id>/
    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = str(user_id)  # <-- ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è user_id={user_id}...")

    # === –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ—Å—Å–∏–∏ ===
    session_dir = os.path.join("accounts", user_id)
    os.makedirs(session_dir, exist_ok=True)

    # === –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ .session —Ñ–∞–π–ª–∞ ===
    session_path = None
    for file in os.listdir(session_dir):
        if file.endswith(".session"):
            session_path = os.path.join(session_dir, file)
            break

    if not session_path:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .session –≤ {session_dir}")
        await message.answer(
            get_text(user.language, "account_missing"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_path}")
    # Telethon –æ–∂–∏–¥–∞–µ—Ç session_name –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    session_name = session_path.replace(".session", "")

    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telethon ===
    client = TelegramClient(session_name, api_id, api_hash)
    await client.connect()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
    if not await client.is_user_authorized():
        logger.error(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_path} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.")
        await message.answer(
            get_text(user.language, "account_missing_2"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

    # === –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ===
    target_group_id = await join_target_group(client=client, user_id=user_id)

    if not target_group_id:
        logger.error("‚ùå Failed to join target group or group not configured")
        await message.answer(
            get_text(user.language, "target_group_missing"),
            reply_markup=menu_launch_tracking_keyboard()
        )
        await client.disconnect()
        return

    # === –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º ===
    await join_required_channels(client=client, user_id=user_id)

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã ===
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Groups = create_groups_model(user_id=user_id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø
    Groups.create_table()

    channels = [group.username_chat_channel for group in Groups.select()]
    if not channels:
        logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        await client.disconnect()
        await message.answer(
            get_text(user.language, "tracking_launch_error"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
    @client.on(events.NewMessage(chats=channels))
    async def handle_new_message(event: events.NewMessage.Event):
        await process_message(client, event.message, event.chat_id, user_id, target_group_id)

    logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        await client.run_until_disconnected()
    finally:
        await client.disconnect()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
