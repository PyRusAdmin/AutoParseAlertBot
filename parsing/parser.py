# -*- coding: utf-8 -*-
import os

from loguru import logger
from telethon import TelegramClient, events
from telethon.errors import UserAlreadyParticipantError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Message

from database.database import create_groups_model
from keyboards.keyboards import menu_launch_tracking_keyboard
from locales.locales import get_text
from system.dispatcher import api_id, api_hash

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "target_channel_id": -1001918436153,
    "keywords": ["–∫–∏–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–¥–æ–Ω–µ—Ü–∫ —Å–∏—Ç–∏", "—à–∞—Ö—Ç–µ—Ä—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å"],
}

# üß† –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
forwarded_messages = set()


async def process_message(client, message: Message, chat_id: int):
    if not message.message:
        return

    message_text = message.message.lower()
    msg_key = f"{chat_id}-{message.id}"

    if msg_key in forwarded_messages:
        return

    if any(keyword in message_text for keyword in CONFIG["keywords"]):
        logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –ü–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID={message.id}")
        try:
            await client.forward_messages(CONFIG["target_channel_id"], message)
            forwarded_messages.add(msg_key)
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


async def join_required_channels(client: TelegramClient, user_tg):
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    :param client: –û–±—ä–µ–∫—Ç TelegramClient
    :param user_tg: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Groups = create_groups_model(user_id=user_tg.id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø
    Groups.create_table()

    channels = [group.username_chat_channel for group in Groups.select()]

    for channel in channels:
        try:
            logger.info(f"üîó –ü—Ä–æ–±—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}...")
            await client(JoinChannelRequest(channel))
            logger.success(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except UserAlreadyParticipantError:
            logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
        except Exception as e:
            logger.exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}: {e}")


async def filter_messages(message, user_id, user):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è AIOgram
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ accounts/<user_id>/
    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = str(user_id)  # <-- ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è user_id={user_id}...")

    # === –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ—Å—Å–∏–∏ ===
    session_dir = os.path.join("accounts", user_id)
    os.makedirs(session_dir, exist_ok=True)

    # === –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ .session —Ñ–∞–π–ª–∞ ===
    session_path = None
    for file in os.listdir(session_dir):
        if file.endswith(".session"):
            session_path = os.path.join(session_dir, file)
            break

    if not session_path:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .session –≤ {session_dir}")
        await message.answer(
            get_text(user.language, "account_missing"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_path}")
    # Telethon –æ–∂–∏–¥–∞–µ—Ç session_name –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    session_name = session_path.replace(".session", "")

    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telethon ===
    client = TelegramClient(session_name, api_id, api_hash)
    await client.connect()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===
    if not await client.is_user_authorized():
        logger.error(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_path} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.")
        await message.answer(
            get_text(user.language, "account_missing_2"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

    # === –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º ===
    await join_required_channels(client=client, user_tg=user_id)

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã ===
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Groups = create_groups_model(user_id=user_id)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø
    Groups.create_table()

    channels = [group.username_chat_channel for group in Groups.select()]
    if not channels:
        logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        await client.disconnect()
        await message.answer(
            get_text(user.language, "tracking_launch_error"),
            reply_markup=menu_launch_tracking_keyboard()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        )
        return

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
    @client.on(events.NewMessage(chats=channels))
    async def handle_new_message(event: events.NewMessage.Event):
        await process_message(client, event.message, event.chat_id)

    logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        await client.run_until_disconnected()
    finally:
        await client.disconnect()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
